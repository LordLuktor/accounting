version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: accuflow
      POSTGRES_USER: accuflow
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - accuflow-network

  # Backend API
  backend:
    image: node:18-alpine
    working_dir: /app
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: accuflow
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: accuflow
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: https://${FRONTEND_DOMAIN}
    depends_on:
      - postgres
    volumes:
      - ./backend:/app
    command: sh -c "cd /app && npm install && npm run build && npm start"
    networks:
      - accuflow-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.apiaccountingsteinmetzltd.rule=Host(`${BACKEND_DOMAIN}`)"
      - "traefik.http.routers.apiaccountingsteinmetzltd.tls=true"
      - "traefik.http.routers.apiaccountingsteinmetzltd.tls.certresolver=letsencrypt"
      - "traefik.http.services.apiaccountingsteinmetzltd.loadbalancer.server.port=3000"

  # Frontend
  frontend:
    image: node:18-alpine
    working_dir: /app
    environment:
      VITE_API_URL: https://${BACKEND_DOMAIN}
    volumes:
      - ./:/app
      - /app/node_modules
    command: sh -c "npm install && npm run build && npx serve -s dist -l 3000"
    networks:
      - accuflow-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.accountingsteinmetzltd.rule=Host(`${FRONTEND_DOMAIN}`)"
      - "traefik.http.routers.accountingsteinmetzltd.tls=true"
      - "traefik.http.routers.accountingsteinmetzltd.tls.certresolver=letsencrypt"
      - "traefik.http.services.accountingsteinmetzltd.loadbalancer.server.port=3000"

volumes:
  postgres_data:

networks:
  accuflow-network:
    driver: bridge